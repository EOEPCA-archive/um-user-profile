apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Values.global.user }}-cm
data:
  UP_SSO_URL: {{ .Values.global.domain | quote }}
  UP_TITLE: {{ .Values.configMap.title | quote }}
  UP_SCOPES: {{ .Values.configMap.scopes | quote }}
  UP_REDIRECT_URI: "http://{{ .Values.global.domain }}{{ .Values.configMap.redirectUri }}"
  UP_POST_LOGOUT_REDIRECT_URI: "http://{{ .Values.global.domain }}{{ .Values.configMap.postLogoutRedirectUri }}"
  UP_BASE_URI: {{ .Values.global.baseUri | quote }}
  UP_OAUTH_CALLBACK_PATH: {{ .Values.configMap.oauthCallbackPath | quote }}
  UP_LOGOUT_ENDPOINT: {{ .Values.configMap.logoutEndpoint | quote }}
  UP_SERVICE_HOST: {{ .Values.global.serviceHost | quote }}
  UP_SERVICE_PORT: {{ .Values.global.servicePort | quote }}
  UP_PROTECTED_ATTRIBUTES: {{ .Values.configMap.protectedAttributes | quote }}
  UP_BLACKLIST_ATTRIBUTES: {{ .Values.configMap.blacklistAttributes | quote }}
  UP_SEPARATOR_UI_ATTRIBUTES: {{ .Values.configMap.separatorUiAttributes | quote }}
  UP_COLOR_WEB_BACKGROUND: {{ .Values.configMap.colorWebBackground | quote }}
  UP_COLOR_WEB_HEADER: {{ .Values.configMap.colorWebHeader | quote }}
  UP_LOGO_ALT_NAME: {{ .Values.configMap.logoAltName | quote }}
  UP_LOGO_IMAGE_PATH: {{ .Values.configMap.logoImagePath | quote }}
  UP_COLOR_HEADER_TABLE: {{ .Values.configMap.colorHeaderTable | quote }}
  UP_COLOR_TEXT_HEADER_TABLE: {{ .Values.configMap.colorTextHeaderTable | quote }}
  UP_COLOR_BUTTON_MODIFY: {{ .Values.configMap.colorButtonModify | quote }}
  UP_USE_THREADS: {{ .Values.configMap.useThreads | quote }}
  UP_DEBUG_MODE: {{ .Values.configMap.debugMode | quote }}
  UP_PDP_URL: http://{{ .Values.global.domain }}
  UP_PDP_PORT: {{ .Values.configMap.pdpPort | quote }}
  tls_generator.py: "from pprint import pprint\nfrom kubernetes import config, client\nimport
    logging\n\n#use the serviceAccount k8s gives to pods\nconfig.load_incluster_config()
    \nv1 = client.CoreV1Api()\n\n#global vars\nname = \"tls-certificate\"\nnamespace
    = \"default\"\n\n# check if gluu secret exists\ndef get_certs():\n    if ( v1.read_namespaced_secret(
    'gluu', 'default' ) ):\n        ssl_cert = v1.read_namespaced_secret( 'gluu',
    'default' ).data['ssl_cert']\n        ssl_key = v1.read_namespaced_secret( \"gluu\",
    \"default\" ).data['ssl_key']\n        \n        print('ssl_cert / {} \\n ssl_key:
    {}'.format(ssl_cert, ssl_key) )\n\n    return ssl_cert, ssl_key\n\n\ndef create_tls(cert,
    key):\n\n    v1 = client.CoreV1Api()\n    try:\n        secret = v1.read_namespaced_secret(name,
    namespace)\n    except client.rest.ApiException as e:\n        if e.status ==
    404:\n            print('secret/{} in ns/{} does not exist. Creating...'.format(\n
    \               name, namespace))\n            metadata = {\n                'name':
    name,\n                'namespace': namespace\n            }\n            data
    = {\n                'tls.crt': cert,\n                'tls.key' : key,\n            }\n
    \           api_version = 'v1'\n            kind = 'Secret'\n            body
    = client.V1Secret(api_version, data , kind, metadata, \n                type='kubernetes.io/tls')\n
    \           api_response = v1.create_namespaced_secret(namespace, body )\n            pprint(api_response)\n
    \       else:\n            logging.exception(e)\n        return False\n    else:\n
    \       print('tls-certificate already exists as /{}'. format(\n            secret\n
    \       ))\n\n        \ndef main():\n    cert, key = get_certs()\n    create_tls(cert,
    key)\n\nif __name__ == \"__main__\":\n    main()"
